import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';

const LOGO_PATH = '/Logo NusaTanggap.png';

export const exportToPDF = async (elementIds, filename = 'statistik-nusatanggap') => {
  try {
    const pdf = new jsPDF({ orientation: 'landscape', unit: 'mm', format: 'a4' });
    const pdfWidth = pdf.internal.pageSize.getWidth();
    const pdfHeight = pdf.internal.pageSize.getHeight();

    for (let i = 0; i < elementIds.length; i++) {
      if (i > 0) pdf.addPage();
      // Background: putih dengan bottom border biru gradien tipis
      pdf.setFillColor(255, 255, 255);
      pdf.rect(0, 0, pdfWidth, 40, 'F');
      // Gradien biru sebagai garis bawah header
      const gradHeight = 4;
      const gradCanvas = document.createElement('canvas');
      gradCanvas.width = pdfWidth * 4;
      gradCanvas.height = gradHeight * 4;
      const gradCtx = gradCanvas.getContext('2d');
      const grad = gradCtx.createLinearGradient(0, 0, gradCanvas.width, 0);
      grad.addColorStop(0, '#2563eb');
      grad.addColorStop(1, '#1e40af');
      gradCtx.fillStyle = grad;
      gradCtx.fillRect(0, 0, gradCanvas.width, gradCanvas.height);
      const gradImg = gradCanvas.toDataURL('image/png');
      pdf.addImage(gradImg, 'PNG', 0, 40 - gradHeight, pdfWidth, gradHeight);

      // Logo tetap jelas di background putih
      const logo = await loadImage(LOGO_PATH);
      if (logo) pdf.addImage(logo, 'PNG', 14, 10, 18, 18, undefined, 'FAST');

      // Judul dan subjudul
      pdf.setFont('helvetica', 'bold');
      pdf.setFontSize(18);
      pdf.setTextColor(30, 41, 59); // slate-800
      pdf.text('Laporan Statistik NusaTanggap', 36, 22);
      pdf.setFont('helvetica', 'normal');
      pdf.setFontSize(11);
      pdf.setTextColor(100, 116, 139); // slate-500
      pdf.text('Dashboard Analitik dan Pelaporan Admin', 36, 30);

      // Tanggal dan status di kanan
      pdf.setFontSize(10);
      pdf.setTextColor(71, 85, 105); // slate-600
      pdf.text(
        `Dibuat: ${new Date().toLocaleDateString('id-ID', { day: 'numeric', month: 'long', year: 'numeric' })}`,
        pdfWidth - 80,
        18
      );
      pdf.text('Status: Real-time Data', pdfWidth - 80, 26);

      // KONTEN
      const element = document.getElementById(elementIds[i]);
      if (!element) continue;
      const rect = element.getBoundingClientRect();
      const canvas = await html2canvas(element, {
        scale: 3,
        useCORS: true,
        backgroundColor: '#f8fafc',
        width: rect.width,
        height: rect.height,
      });
      const imgData = canvas.toDataURL('image/png');
      const margin = 14;
      const contentY = 46;
      const contentW = pdfWidth - margin * 2;
      const contentH = pdfHeight - contentY - 18;
      // Rasio gambar
      const imgRatio = canvas.width / canvas.height;
      let drawW = contentW;
      let drawH = drawW / imgRatio;
      if (drawH > contentH) {
        drawH = contentH;
        drawW = drawH * imgRatio;
      }
      const drawX = margin + (contentW - drawW) / 2;
      const drawY = contentY + (contentH - drawH) / 2;

      pdf.setFillColor(255, 255, 255);
      pdf.roundedRect(margin, contentY, contentW, contentH, 12, 12, 'F');
      pdf.addImage(imgData, 'PNG', drawX, drawY, drawW, drawH, undefined, 'FAST');

      // FOOTER
      const footerY = pdfHeight - 8;
      pdf.setFont('helvetica', 'normal');
      pdf.setFontSize(9);
      pdf.setTextColor(100, 116, 139);
      pdf.text('NusaTanggap - Platform Pelaporan Publik Indonesia', 18, footerY);
      pdf.setTextColor(37, 99, 235);
      pdf.text('https://nusatanggap.com', pdfWidth / 2, footerY, { align: 'center' });
      pdf.setTextColor(100, 116, 139);
      pdf.text(`Halaman ${i + 1} dari ${elementIds.length} â€¢ Generated by Admin Panel`, pdfWidth - 18, footerY, { align: 'right' });
      pdf.setFontSize(8);
      pdf.setTextColor(203, 213, 225);
      pdf.text('CONFIDENTIAL', pdfWidth - 30, footerY - 4, { align: 'right' });
    }

    const finalFilename = `${filename}-${new Date().toISOString().split('T')[0]}.pdf`;
    pdf.save(finalFilename);
    return true;
  } catch (error) {
    console.error('Error generating PDF:', error);
    return false;
  }
};

function loadImage(src) {
  return new Promise((resolve, reject) => {
    const img = new window.Image();
    img.crossOrigin = 'anonymous';
    img.onload = () => {
      try {
        const canvas = document.createElement('canvas');
        canvas.width = img.width;
        canvas.height = img.height;
        const ctx = canvas.getContext('2d');
        ctx.drawImage(img, 0, 0);
        resolve(canvas.toDataURL('image/png'));
      } catch (error) {
        reject(error);
      }
    };
    img.onerror = () => {
      resolve(null);
    };
    img.src = `${src}?t=${Date.now()}`;
  });
}
